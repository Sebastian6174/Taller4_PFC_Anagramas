import Anagramas._

lOcPal("casa")
combinaciones(lOcPal("casa"))
val frase = List("cosas", "como", "yo")
combinaciones(lOcFrase(frase))

anagramasDeFrase(frase)

import Anagramas._

// Funci√≥n para imprimir resultados de prueba
def probar(frase: Frase, descripcion: String): Unit = {
  println(s"üîç $descripcion")
  println(s"Frase: $frase")
  val resultado = anagramasDeFrase(frase)
  if (resultado.isEmpty) println("Resultado: (ning√∫n anagrama encontrado)\n")
  else resultado.foreach(anagrama => println(s"  ‚û§ ${anagrama.mkString(" ")}"))
  println("-" * 50 + "\n")
}

// Casos de prueba
probar(List(), "Frase vac√≠a")
probar(List("yo"), "Una sola palabra que est√° en el diccionario")
probar(List("xyz"), "Palabra no existente en el diccionario")
probar(List("sos", "yo"), "Frase con varias combinaciones posibles")
probar(List("mocosos"), "Frase con letras repetidas (m√∫ltiples caminos)")
probar(List("ocasos"), "Frase con m√∫ltiples anagramas posibles")
probar(List("abc"), "Frase con letras que no est√°n en ninguna palabra del diccionario")
probar(List("cosas", "como", "yo"), "Boss final")